// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calling.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Calling.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CallingRoot

@implementation CallingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CallingRoot_FileDescriptor

static GPBFileDescriptor *CallingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"calling"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum StartCallingResultType

GPBEnumDescriptor *StartCallingResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000ToUserInTalking\000";
    static const int32_t values[] = {
        StartCallingResultType_Success,
        StartCallingResultType_ToUserInTalking,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StartCallingResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StartCallingResultType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StartCallingResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case StartCallingResultType_Success:
    case StartCallingResultType_ToUserInTalking:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CallingStatus

GPBEnumDescriptor *CallingStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Starting\000Talking\000End\000";
    static const int32_t values[] = {
        CallingStatus_Starting,
        CallingStatus_Talking,
        CallingStatus_End,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CallingStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CallingStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CallingStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case CallingStatus_Starting:
    case CallingStatus_Talking:
    case CallingStatus_End:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StartCallingRequest

@implementation StartCallingRequest

@dynamic toUserId;

typedef struct StartCallingRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t toUserId;
} StartCallingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = StartCallingRequest_FieldNumber_ToUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StartCallingRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StartCallingRequest class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StartCallingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StartCallingResponse

@implementation StartCallingResponse

@dynamic resultType;

typedef struct StartCallingResponse__storage_ {
  uint32_t _has_storage_[1];
  StartCallingResultType resultType;
} StartCallingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = StartCallingResultType_EnumDescriptor,
        .number = StartCallingResponse_FieldNumber_ResultType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StartCallingResponse__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StartCallingResponse class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StartCallingResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StartCallingResponse_ResultType_RawValue(StartCallingResponse *message) {
  GPBDescriptor *descriptor = [StartCallingResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StartCallingResponse_FieldNumber_ResultType];
  return GPBGetMessageInt32Field(message, field);
}

void SetStartCallingResponse_ResultType_RawValue(StartCallingResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [StartCallingResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StartCallingResponse_FieldNumber_ResultType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ReceiveCallingRequest

@implementation ReceiveCallingRequest

@dynamic fromUserId;
@dynamic toUserId;

typedef struct ReceiveCallingRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t fromUserId;
  int64_t toUserId;
} ReceiveCallingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = ReceiveCallingRequest_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiveCallingRequest__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = ReceiveCallingRequest_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceiveCallingRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiveCallingRequest class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiveCallingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndCallingRequest

@implementation EndCallingRequest

@dynamic fromUserId;
@dynamic toUserId;

typedef struct EndCallingRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t fromUserId;
  int64_t toUserId;
} EndCallingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = EndCallingRequest_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndCallingRequest__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = EndCallingRequest_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndCallingRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndCallingRequest class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndCallingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContinueCallingRequest

@implementation ContinueCallingRequest

@dynamic fromUserId;
@dynamic toUserId;

typedef struct ContinueCallingRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t fromUserId;
  int64_t toUserId;
} ContinueCallingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = ContinueCallingRequest_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContinueCallingRequest__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = ContinueCallingRequest_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContinueCallingRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContinueCallingRequest class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContinueCallingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatusResponse

@implementation StatusResponse

@dynamic fromUserId;
@dynamic toUserId;
@dynamic status;

typedef struct StatusResponse__storage_ {
  uint32_t _has_storage_[1];
  CallingStatus status;
  int64_t fromUserId;
  int64_t toUserId;
} StatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = StatusResponse_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = StatusResponse_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = CallingStatus_EnumDescriptor,
        .number = StatusResponse_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusResponse class]
                                     rootClass:[CallingRoot class]
                                          file:CallingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StatusResponse_Status_RawValue(StatusResponse *message) {
  GPBDescriptor *descriptor = [StatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StatusResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetStatusResponse_Status_RawValue(StatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [StatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StatusResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
