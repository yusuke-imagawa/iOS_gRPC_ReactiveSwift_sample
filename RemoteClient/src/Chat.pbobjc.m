// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Chat.pbobjc.h"
#import "Commons.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChatRoot

@implementation ChatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChatRoot_FileDescriptor

static GPBFileDescriptor *ChatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"chat"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic toUserId;
@dynamic message;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
  int64_t toUserId;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_ToUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReceiveMessageResponse

@implementation ReceiveMessageResponse

@dynamic hasChatMessage, chatMessage;
@dynamic hasFromUser, fromUser;
@dynamic hasToUser, toUser;

typedef struct ReceiveMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  ChatMessage *chatMessage;
  User *fromUser;
  User *toUser;
} ReceiveMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatMessage),
        .number = ReceiveMessageResponse_FieldNumber_ChatMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiveMessageResponse__storage_, chatMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = ReceiveMessageResponse_FieldNumber_FromUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceiveMessageResponse__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUser",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = ReceiveMessageResponse_FieldNumber_ToUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceiveMessageResponse__storage_, toUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiveMessageResponse class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiveMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\010\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AllChatMessageRequest

@implementation AllChatMessageRequest

@dynamic minMessageId;

typedef struct AllChatMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t minMessageId;
} AllChatMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minMessageId",
        .dataTypeSpecific.className = NULL,
        .number = AllChatMessageRequest_FieldNumber_MinMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AllChatMessageRequest__storage_, minMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AllChatMessageRequest class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AllChatMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AllChatMessageResponse

@implementation AllChatMessageResponse

@dynamic usersArray, usersArray_Count;
@dynamic messagesArray, messagesArray_Count;

typedef struct AllChatMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *messagesArray;
} AllChatMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = AllChatMessageResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AllChatMessageResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatMessage),
        .number = AllChatMessageResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AllChatMessageResponse__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AllChatMessageResponse class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AllChatMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessage

@implementation ChatMessage

@dynamic id_p;
@dynamic fromUserId;
@dynamic toUserId;
@dynamic message;
@dynamic hasDate, date;

typedef struct ChatMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
  GPBTimestamp *date;
  int64_t id_p;
  int64_t fromUserId;
  int64_t toUserId;
} ChatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_FromUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_ToUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Message,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = ChatMessage_FieldNumber_Date,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessage class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\n\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
