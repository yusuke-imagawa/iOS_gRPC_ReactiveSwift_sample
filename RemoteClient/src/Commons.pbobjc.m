// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commons.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Commons.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonsRoot

@implementation CommonsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CommonsRoot_FileDescriptor

static GPBFileDescriptor *CommonsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum GenderType

GPBEnumDescriptor *GenderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Male\000Female\000";
    static const int32_t values[] = {
        GenderType_Male,
        GenderType_Female,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GenderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GenderType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GenderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GenderType_Male:
    case GenderType_Female:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - User

@implementation User

@dynamic id_p;
@dynamic name;
@dynamic genderType;
@dynamic age;
@dynamic pr;
@dynamic hasProfileImage, profileImage;
@dynamic hasLastOnlineDatetime, lastOnlineDatetime;
@dynamic hasCreated, created;
@dynamic hasModified, modified;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  GenderType genderType;
  int32_t age;
  NSString *name;
  NSString *pr;
  ProfileImage *profileImage;
  GPBTimestamp *lastOnlineDatetime;
  GPBTimestamp *created;
  GPBTimestamp *modified;
  int64_t id_p;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "genderType",
        .dataTypeSpecific.enumDescFunc = GenderType_EnumDescriptor,
        .number = User_FieldNumber_GenderType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, genderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Age,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pr",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Pr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, pr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profileImage",
        .dataTypeSpecific.className = GPBStringifySymbol(ProfileImage),
        .number = User_FieldNumber_ProfileImage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, profileImage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastOnlineDatetime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = User_FieldNumber_LastOnlineDatetime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, lastOnlineDatetime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = User_FieldNumber_Created,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modified",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = User_FieldNumber_Modified,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, modified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[CommonsRoot class]
                                          file:CommonsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\n\000\006\014\000\007\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t User_GenderType_RawValue(User *message) {
  GPBDescriptor *descriptor = [User descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:User_FieldNumber_GenderType];
  return GPBGetMessageInt32Field(message, field);
}

void SetUser_GenderType_RawValue(User *message, int32_t value) {
  GPBDescriptor *descriptor = [User descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:User_FieldNumber_GenderType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ProfileImage

@implementation ProfileImage

@dynamic hasImageOriginalURL, imageOriginalURL;
@dynamic hasImage100URL, image100URL;
@dynamic hasImage300URL, image300URL;
@dynamic hasImage600URL, image600URL;

typedef struct ProfileImage__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *imageOriginalURL;
  GPBStringValue *image100URL;
  GPBStringValue *image300URL;
  GPBStringValue *image600URL;
} ProfileImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageOriginalURL",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ProfileImage_FieldNumber_ImageOriginalURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProfileImage__storage_, imageOriginalURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image100URL",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ProfileImage_FieldNumber_Image100URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProfileImage__storage_, image100URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image300URL",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ProfileImage_FieldNumber_Image300URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProfileImage__storage_, image300URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image600URL",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ProfileImage_FieldNumber_Image600URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProfileImage__storage_, image600URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileImage class]
                                     rootClass:[CommonsRoot class]
                                          file:CommonsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProfileImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\016!!\000\002\t!!\000\003\t!!\000\004\t!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
